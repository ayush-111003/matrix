#include<bits/stdc++.h>
using namespace std;
// diagonal matrix
class diagonal {
    private:
    int n;
    int *A;
    public:
    diagonal(){//parameterised constructor used for initialization not necessary
        n=2;
        A = new int[2];
    }
    diagonal(int n)
    {
        this->n=n;
        A=new int [n];
    }
    ~diagonal()
    {
        delete []A;
    }
    void set_1(int i , int j, int x);
    int get_1(int i , int j);
    void display();
   
};
void diagonal::set_1(int i , int j , int x)
{
    if(i==j)
        A[i-1] = x;
}
int diagonal::get_1(int i , int j)
{
    if(i==j)return A[i-1];
    else return 0;
}
void diagonal::display()
{
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if(i==j)
                cout<<A[i]<<" ";
            else
                cout<<0<<" ";
        }
        cout<<endl;
    }
    
}
int main()
{       
    diagonal arr(5);
    arr.set_1(1,1,1);
    arr.set_1(2,2,2);
    arr.set_1(3,3,3);
    arr.set_1(4,4,4);
    arr.set_1(5,5,5);
    // cout<<arr.get_1(1,1)<<endl;
    // cout<<arr.get_1(2,2)<<endl;
    // cout<<arr.get_1(3,3)<<endl;
    // cout<<arr.get_1(4,4)<<endl;
    // cout<<arr.get_1(5,5)<<endl;
    arr.display();
    return 0;
}
